"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
/**
 * Apply grayscale effect on the image
 */
function grayscale() {
    /**
     * @param pixels - Image pixels
     * @returns Updated image pixels
     */
    return function (pixels) {
        var data = pixels.data;
        for (var i = 0; i < data.length; i += 4) {
            var r = data[i];
            var g = data[i + 1];
            var b = data[i + 2];
            var avg = 0.2126 * r + 0.7152 * g + 0.0722 * b;
            data[i] = data[i + 1] = data[i + 2] = avg;
        }
        return pixels;
    };
}
exports.grayscale = grayscale;
/**
 * Apply sepia effect in the image
 *
 * @param adjustment - From 0 (unchanged) to 1 (sepia)
 */
function sepia(adjustment) {
    /**
     * @param pixels - Image pixels
     * @returns Updated image pixels
     */
    return function (pixels) {
        var data = pixels.data;
        for (var i = 0; i < data.length; i += 4) {
            var r = data[i];
            var g = data[i + 1];
            var b = data[i + 2];
            data[i] =
                r * (1 - 0.607 * adjustment) +
                    g * 0.769 * adjustment +
                    b * 0.189 * adjustment;
            data[i + 1] =
                r * 0.349 * adjustment +
                    g * (1 - 0.314 * adjustment) +
                    b * 0.168 * adjustment;
            data[i + 2] =
                r * 0.272 * adjustment +
                    g * 0.534 * adjustment +
                    b * (1 - 0.869 * adjustment);
        }
        return pixels;
    };
}
exports.sepia = sepia;
/**
 * Apply brightness effect on the image
 *
 * @param adjustment - From -1 (darker) to 1 (lighter). 0 is unchanged.
 */
function brightness(adjustment) {
    /**
     * @param pixels - Image pixels
     * @returns Updated image pixels
     */
    return function (pixels) {
        var data = pixels.data;
        adjustment = adjustment > 1 ? 1 : adjustment;
        adjustment = adjustment < -1 ? -1 : adjustment;
        adjustment = ~~(255 * adjustment);
        for (var i = 0; i < data.length; i += 4) {
            data[i] += adjustment;
            data[i + 1] += adjustment;
            data[i + 2] += adjustment;
        }
        return pixels;
    };
}
exports.brightness = brightness;
/**
 * Apply saturation effect on the image.
 *
 * @param adjustment - From -1 (desaturated) to positive number. 0 is unchanged.
 */
function saturation(adjustment) {
    /**
     * @param pixels - Image pixels
     * @returns Updated image pixels
     */
    return function (pixels) {
        var data = pixels.data;
        adjustment = adjustment < -1 ? -1 : adjustment;
        for (var i = 0; i < data.length; i += 4) {
            var r = data[i];
            var g = data[i + 1];
            var b = data[i + 2];
            var gray = 0.2989 * r + 0.587 * g + 0.114 * b; // weights from CCIR 601 spec
            data[i] = -gray * adjustment + data[i] * (1 + adjustment);
            data[i + 1] = -gray * adjustment + data[i + 1] * (1 + adjustment);
            data[i + 2] = -gray * adjustment + data[i + 2] * (1 + adjustment);
        }
        return pixels;
    };
}
exports.saturation = saturation;
/**
 * Apply contrast effect on the image
 *
 * @param adjustment - From -1 to 1
 */
function contrast(adjustment) {
    /**
     * @param pixels - Image pixels
     * @returns Updated image pixels
     */
    return function (pixels) {
        var data = pixels.data;
        adjustment *= 255;
        var factor = (259 * (adjustment + 255)) / (255 * (259 - adjustment));
        for (var i = 0; i < data.length; i += 4) {
            data[i] = factor * (data[i] - 128) + 128;
            data[i + 1] = factor * (data[i + 1] - 128) + 128;
            data[i + 2] = factor * (data[i + 2] - 128) + 128;
        }
        return pixels;
    };
}
exports.contrast = contrast;
/**
 * Apply color filter effect on the image. It adds a slight color overlay.
 *
 * @param rgbColor - [r, g, b, adjustment] tuple
 */
function colorFilter(_a) {
    var r = _a[0], g = _a[1], b = _a[2], adjustment = _a[3];
    /**
     * @param pixels - Image pixels
     * @returns Updated image pixels
     */
    return function (pixels) {
        var data = pixels.data;
        for (var i = 0; i < data.length; i += 4) {
            data[i] -= (data[i] - r) * adjustment;
            data[i + 1] -= (data[i + 1] - g) * adjustment;
            data[i + 2] -= (data[i + 2] - b) * adjustment;
        }
        return pixels;
    };
}
exports.colorFilter = colorFilter;
/**
 * Adjust RGB of the image
 *
 * @param adjustment - [r, g, b] tuple
 */
function rgbAdjust(_a) {
    var r = _a[0], g = _a[1], b = _a[2];
    /**
     * @param pixels - Image pixels
     * @returns Updated image pixels
     */
    return function (pixels) {
        var data = pixels.data;
        for (var i = 0; i < data.length; i += 4) {
            data[i] *= r;
            data[i + 1] *= g;
            data[i + 2] *= b;
        }
        return pixels;
    };
}
exports.rgbAdjust = rgbAdjust;
