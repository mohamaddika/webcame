"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : new P(function (resolve) { resolve(result.value); }).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __generator = (this && this.__generator) || function (thisArg, body) {
    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
    return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
    function verb(n) { return function (v) { return step([n, v]); }; }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while (_) try {
            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [op[0] & 2, t.value];
            switch (op[0]) {
                case 0: case 1: t = op; break;
                case 4: _.label++; return { value: op[1], done: false };
                case 5: _.label++; y = op[1]; op = [0]; continue;
                case 7: op = _.ops.pop(); _.trys.pop(); continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                    if (t[2]) _.ops.pop();
                    _.trys.pop(); continue;
            }
            op = body.call(thisArg, _);
        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
    }
};
function __export(m) {
    for (var p in m) if (!exports.hasOwnProperty(p)) exports[p] = m[p];
}
Object.defineProperty(exports, "__esModule", { value: true });
var pipe_1 = require("./utils/pipe");
var InstagramFiltersError_1 = require("./utils/InstagramFiltersError");
function applyPresetOnCanvas(canvas) {
    var presets = [];
    for (var _i = 1; _i < arguments.length; _i++) {
        presets[_i - 1] = arguments[_i];
    }
    if (!canvas) {
        throw new InstagramFiltersError_1.InstagramFiltersError('canvas argument must be defined');
    }
    if (!presets || !presets.length) {
        throw new InstagramFiltersError_1.InstagramFiltersError('At least one preset must be passed');
    }
    var firstPreset = presets[0], nextPresets = presets.slice(1);
    var context = canvas.getContext('2d');
    if (!context) {
        throw new InstagramFiltersError_1.InstagramFiltersError('Unable to retrieve context from the canvas');
    }
    var pixels = context.getImageData(0, 0, canvas.width, canvas.height);
    var filteredPixels = pipe_1.pipe.apply(void 0, [firstPreset].concat(nextPresets))(pixels);
    context.putImageData(filteredPixels, 0, 0);
}
exports.applyPresetOnCanvas = applyPresetOnCanvas;
function applyPresetOnImage(image) {
    var presets = [];
    for (var _i = 1; _i < arguments.length; _i++) {
        presets[_i - 1] = arguments[_i];
    }
    return __awaiter(this, void 0, void 0, function () {
        var canvas, context, blob;
        return __generator(this, function (_a) {
            switch (_a.label) {
                case 0:
                    if (!image) {
                        throw new InstagramFiltersError_1.InstagramFiltersError('image argument must be defined');
                    }
                    canvas = document.createElement('canvas');
                    canvas.width = image.naturalWidth;
                    canvas.height = image.naturalHeight;
                    context = canvas.getContext('2d');
                    if (!context) {
                        throw new InstagramFiltersError_1.InstagramFiltersError('Unable to retrieve context from the canvas');
                    }
                    context.drawImage(image, 0, 0, canvas.width, canvas.height);
                    applyPresetOnCanvas.apply(void 0, [canvas].concat(presets));
                    return [4 /*yield*/, new Promise(function (resolve) {
                            return canvas.toBlob(resolve);
                        })];
                case 1:
                    blob = _a.sent();
                    canvas.remove();
                    return [2 /*return*/, blob];
            }
        });
    });
}
exports.applyPresetOnImage = applyPresetOnImage;
function applyPresetOnImageURL(url) {
    var presets = [];
    for (var _i = 1; _i < arguments.length; _i++) {
        presets[_i - 1] = arguments[_i];
    }
    return __awaiter(this, void 0, void 0, function () {
        var image;
        return __generator(this, function (_a) {
            switch (_a.label) {
                case 0: return [4 /*yield*/, new Promise(function (resolve, reject) {
                        var imageElement = new Image();
                        imageElement.addEventListener('load', function () { return resolve(imageElement); });
                        imageElement.addEventListener('error', reject);
                        imageElement.src = url;
                    })];
                case 1:
                    image = _a.sent();
                    return [2 /*return*/, applyPresetOnImage.apply(void 0, [image].concat(presets))];
            }
        });
    });
}
exports.applyPresetOnImageURL = applyPresetOnImageURL;
__export(require("./presets"));
