import {
  __commonJS
} from "./chunk-76J2PTFD.js";

// node_modules/instagram-filters/lib/utils/pipe.js
var require_pipe = __commonJS({
  "node_modules/instagram-filters/lib/utils/pipe.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    function pipe(firstFn) {
      var fns = [];
      for (var _i = 1; _i < arguments.length; _i++) {
        fns[_i - 1] = arguments[_i];
      }
      return fns.reduce(function(prevFn, nextFn) {
        return function(value) {
          return nextFn(prevFn(value));
        };
      }, firstFn);
    }
    exports.pipe = pipe;
  }
});

// node_modules/instagram-filters/lib/utils/InstagramFiltersError.js
var require_InstagramFiltersError = __commonJS({
  "node_modules/instagram-filters/lib/utils/InstagramFiltersError.js"(exports) {
    "use strict";
    var __extends = exports && exports.__extends || function() {
      var extendStatics = function(d, b) {
        extendStatics = Object.setPrototypeOf || { __proto__: [] } instanceof Array && function(d2, b2) {
          d2.__proto__ = b2;
        } || function(d2, b2) {
          for (var p in b2)
            if (b2.hasOwnProperty(p))
              d2[p] = b2[p];
        };
        return extendStatics(d, b);
      };
      return function(d, b) {
        extendStatics(d, b);
        function __() {
          this.constructor = d;
        }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
      };
    }();
    Object.defineProperty(exports, "__esModule", { value: true });
    var InstagramFiltersError = (
      /** @class */
      function(_super) {
        __extends(InstagramFiltersError2, _super);
        function InstagramFiltersError2() {
          var _this = _super !== null && _super.apply(this, arguments) || this;
          _this.name = "InstagramFiltersError";
          return _this;
        }
        return InstagramFiltersError2;
      }(Error)
    );
    exports.InstagramFiltersError = InstagramFiltersError;
  }
});

// node_modules/instagram-filters/lib/filters.js
var require_filters = __commonJS({
  "node_modules/instagram-filters/lib/filters.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    function grayscale() {
      return function(pixels) {
        var data = pixels.data;
        for (var i = 0; i < data.length; i += 4) {
          var r = data[i];
          var g = data[i + 1];
          var b = data[i + 2];
          var avg = 0.2126 * r + 0.7152 * g + 0.0722 * b;
          data[i] = data[i + 1] = data[i + 2] = avg;
        }
        return pixels;
      };
    }
    exports.grayscale = grayscale;
    function sepia(adjustment) {
      return function(pixels) {
        var data = pixels.data;
        for (var i = 0; i < data.length; i += 4) {
          var r = data[i];
          var g = data[i + 1];
          var b = data[i + 2];
          data[i] = r * (1 - 0.607 * adjustment) + g * 0.769 * adjustment + b * 0.189 * adjustment;
          data[i + 1] = r * 0.349 * adjustment + g * (1 - 0.314 * adjustment) + b * 0.168 * adjustment;
          data[i + 2] = r * 0.272 * adjustment + g * 0.534 * adjustment + b * (1 - 0.869 * adjustment);
        }
        return pixels;
      };
    }
    exports.sepia = sepia;
    function brightness(adjustment) {
      return function(pixels) {
        var data = pixels.data;
        adjustment = adjustment > 1 ? 1 : adjustment;
        adjustment = adjustment < -1 ? -1 : adjustment;
        adjustment = ~~(255 * adjustment);
        for (var i = 0; i < data.length; i += 4) {
          data[i] += adjustment;
          data[i + 1] += adjustment;
          data[i + 2] += adjustment;
        }
        return pixels;
      };
    }
    exports.brightness = brightness;
    function saturation(adjustment) {
      return function(pixels) {
        var data = pixels.data;
        adjustment = adjustment < -1 ? -1 : adjustment;
        for (var i = 0; i < data.length; i += 4) {
          var r = data[i];
          var g = data[i + 1];
          var b = data[i + 2];
          var gray = 0.2989 * r + 0.587 * g + 0.114 * b;
          data[i] = -gray * adjustment + data[i] * (1 + adjustment);
          data[i + 1] = -gray * adjustment + data[i + 1] * (1 + adjustment);
          data[i + 2] = -gray * adjustment + data[i + 2] * (1 + adjustment);
        }
        return pixels;
      };
    }
    exports.saturation = saturation;
    function contrast(adjustment) {
      return function(pixels) {
        var data = pixels.data;
        adjustment *= 255;
        var factor = 259 * (adjustment + 255) / (255 * (259 - adjustment));
        for (var i = 0; i < data.length; i += 4) {
          data[i] = factor * (data[i] - 128) + 128;
          data[i + 1] = factor * (data[i + 1] - 128) + 128;
          data[i + 2] = factor * (data[i + 2] - 128) + 128;
        }
        return pixels;
      };
    }
    exports.contrast = contrast;
    function colorFilter(_a) {
      var r = _a[0], g = _a[1], b = _a[2], adjustment = _a[3];
      return function(pixels) {
        var data = pixels.data;
        for (var i = 0; i < data.length; i += 4) {
          data[i] -= (data[i] - r) * adjustment;
          data[i + 1] -= (data[i + 1] - g) * adjustment;
          data[i + 2] -= (data[i + 2] - b) * adjustment;
        }
        return pixels;
      };
    }
    exports.colorFilter = colorFilter;
    function rgbAdjust(_a) {
      var r = _a[0], g = _a[1], b = _a[2];
      return function(pixels) {
        var data = pixels.data;
        for (var i = 0; i < data.length; i += 4) {
          data[i] *= r;
          data[i + 1] *= g;
          data[i + 2] *= b;
        }
        return pixels;
      };
    }
    exports.rgbAdjust = rgbAdjust;
  }
});

// node_modules/instagram-filters/lib/presets.js
var require_presets = __commonJS({
  "node_modules/instagram-filters/lib/presets.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    var _a;
    var filters_1 = require_filters();
    var pipe_1 = require_pipe();
    function clarendon() {
      return pipe_1.pipe(filters_1.brightness(0.1), filters_1.contrast(0.1), filters_1.saturation(0.15));
    }
    exports.clarendon = clarendon;
    function gingham() {
      return pipe_1.pipe(filters_1.sepia(0.04), filters_1.contrast(-0.15));
    }
    exports.gingham = gingham;
    function moon() {
      return pipe_1.pipe(filters_1.grayscale(), filters_1.contrast(-0.04));
    }
    exports.moon = moon;
    function lark() {
      return pipe_1.pipe(filters_1.brightness(0.08), filters_1.rgbAdjust([1, 1.03, 1.05]));
    }
    exports.lark = lark;
    function reyes() {
      return pipe_1.pipe(filters_1.sepia(0.4), filters_1.brightness(0.13), filters_1.contrast(-0.05));
    }
    exports.reyes = reyes;
    function juno() {
      return pipe_1.pipe(filters_1.rgbAdjust([1.01, 1.04, 1]), filters_1.saturation(0.3));
    }
    exports.juno = juno;
    function slumber() {
      return pipe_1.pipe(filters_1.brightness(0.1), filters_1.saturation(-0.5));
    }
    exports.slumber = slumber;
    function crema() {
      return pipe_1.pipe(filters_1.rgbAdjust([1.04, 1, 1.02]));
    }
    exports.crema = crema;
    function ludwig() {
      return pipe_1.pipe(filters_1.brightness(0.05), filters_1.saturation(-0.03));
    }
    exports.ludwig = ludwig;
    function aden() {
      return pipe_1.pipe(filters_1.colorFilter([228, 130, 225, 0.13]), filters_1.saturation(-0.2));
    }
    exports.aden = aden;
    function perpetua() {
      return pipe_1.pipe(filters_1.rgbAdjust([1.05, 1.1, 1]));
    }
    exports.perpetua = perpetua;
    function amaro() {
      return pipe_1.pipe(filters_1.saturation(0.3), filters_1.brightness(0.15));
    }
    exports.amaro = amaro;
    function mayfair() {
      return pipe_1.pipe(filters_1.colorFilter([230, 115, 105, 0.05]), filters_1.saturation(0.15));
    }
    exports.mayfair = mayfair;
    function rise() {
      return pipe_1.pipe(filters_1.colorFilter([255, 170, 0, 0.1]), filters_1.brightness(0.09), filters_1.saturation(0.1));
    }
    exports.rise = rise;
    function hudson() {
      return pipe_1.pipe(filters_1.rgbAdjust([1, 1, 1.25]), filters_1.contrast(0.1), filters_1.brightness(0.15));
    }
    exports.hudson = hudson;
    function valencia() {
      return pipe_1.pipe(filters_1.colorFilter([255, 225, 80, 0.08]), filters_1.saturation(0.1), filters_1.contrast(0.05));
    }
    exports.valencia = valencia;
    function xpro2() {
      return pipe_1.pipe(filters_1.colorFilter([255, 255, 0, 0.07]), filters_1.saturation(0.2), filters_1.contrast(0.15));
    }
    exports.xpro2 = xpro2;
    function sierra() {
      return pipe_1.pipe(filters_1.contrast(-0.15), filters_1.saturation(0.1));
    }
    exports.sierra = sierra;
    function willow() {
      return pipe_1.pipe(filters_1.grayscale(), filters_1.colorFilter([100, 28, 210, 0.03]), filters_1.brightness(0.1));
    }
    exports.willow = willow;
    function lofi() {
      return pipe_1.pipe(filters_1.contrast(0.15), filters_1.saturation(0.2));
    }
    exports.lofi = lofi;
    function inkwell() {
      return pipe_1.pipe(filters_1.grayscale());
    }
    exports.inkwell = inkwell;
    function hefe() {
      return pipe_1.pipe(filters_1.contrast(0.1), filters_1.saturation(0.15));
    }
    exports.hefe = hefe;
    function nashville() {
      return pipe_1.pipe(filters_1.colorFilter([220, 115, 188, 0.12]), filters_1.contrast(-0.05));
    }
    exports.nashville = nashville;
    function stinson() {
      return pipe_1.pipe(filters_1.brightness(0.1), filters_1.sepia(0.3));
    }
    exports.stinson = stinson;
    function vesper() {
      return pipe_1.pipe(filters_1.colorFilter([255, 225, 0, 0.05]), filters_1.brightness(0.06), filters_1.contrast(0.06));
    }
    exports.vesper = vesper;
    function earlybird() {
      return pipe_1.pipe(filters_1.colorFilter([255, 165, 40, 0.2]));
    }
    exports.earlybird = earlybird;
    function brannan() {
      return pipe_1.pipe(filters_1.contrast(0.2), filters_1.colorFilter([140, 10, 185, 0.1]));
    }
    exports.brannan = brannan;
    function sutro() {
      return pipe_1.pipe(filters_1.brightness(-0.1), filters_1.saturation(-0.1));
    }
    exports.sutro = sutro;
    function toaster() {
      return pipe_1.pipe(filters_1.sepia(0.1), filters_1.colorFilter([255, 145, 0, 0.2]));
    }
    exports.toaster = toaster;
    function walden() {
      return pipe_1.pipe(filters_1.brightness(0.1), filters_1.colorFilter([255, 255, 0, 0.2]));
    }
    exports.walden = walden;
    function year1977() {
      return pipe_1.pipe(filters_1.colorFilter([255, 25, 0, 0.15]), filters_1.brightness(0.1));
    }
    exports.year1977 = year1977;
    function kelvin() {
      return pipe_1.pipe(filters_1.colorFilter([255, 140, 0, 0.1]), filters_1.rgbAdjust([1.15, 1.05, 1]));
    }
    exports.kelvin = kelvin;
    function maven() {
      return pipe_1.pipe(filters_1.colorFilter([225, 240, 0, 0.1]), filters_1.saturation(0.25), filters_1.contrast(0.05));
    }
    exports.maven = maven;
    function ginza() {
      return pipe_1.pipe(filters_1.sepia(0.06), filters_1.brightness(0.1));
    }
    exports.ginza = ginza;
    function skyline() {
      return pipe_1.pipe(filters_1.saturation(0.35), filters_1.brightness(0.1));
    }
    exports.skyline = skyline;
    function dogpatch() {
      return pipe_1.pipe(filters_1.contrast(0.15), filters_1.brightness(0.1));
    }
    exports.dogpatch = dogpatch;
    function brooklyn() {
      return pipe_1.pipe(filters_1.colorFilter([25, 240, 252, 0.05]), filters_1.sepia(0.3));
    }
    exports.brooklyn = brooklyn;
    function helena() {
      return pipe_1.pipe(filters_1.colorFilter([208, 208, 86, 0.2]), filters_1.contrast(0.15));
    }
    exports.helena = helena;
    function ashby() {
      return pipe_1.pipe(filters_1.colorFilter([255, 160, 25, 0.1]), filters_1.brightness(0.1));
    }
    exports.ashby = ashby;
    function charmes() {
      return pipe_1.pipe(filters_1.colorFilter([255, 50, 80, 0.12]), filters_1.contrast(0.05));
    }
    exports.charmes = charmes;
    exports.presetsMapping = (_a = {
      Clarendon: clarendon,
      Gingham: gingham,
      Moon: moon,
      Lark: lark,
      Reyes: reyes,
      Juno: juno,
      Slumber: slumber,
      Crema: crema,
      Ludwig: ludwig,
      Aden: aden,
      Perpetua: perpetua,
      Amaro: amaro,
      Mayfair: mayfair,
      Rise: rise,
      Hudson: hudson,
      Valencia: valencia
    }, _a["X-Pro II"] = xpro2, _a.Sierra = sierra, _a.Willow = willow, _a["Lo-Fi"] = lofi, _a.Inkwell = inkwell, _a.Hefe = hefe, _a.Nashville = nashville, _a.Stinson = stinson, _a.Vesper = vesper, _a.Earlybird = earlybird, _a.Brannan = brannan, _a.Sutro = sutro, _a.Toaster = toaster, _a.Walden = walden, _a["1977"] = year1977, _a.Kelvin = kelvin, _a.Maven = maven, _a.Ginza = ginza, _a.Skyline = skyline, _a.Dogpatch = dogpatch, _a.Brooklyn = brooklyn, _a.Helena = helena, _a.Ashby = ashby, _a.Charmes = charmes, _a);
  }
});

// node_modules/instagram-filters/lib/index.js
var require_lib = __commonJS({
  "node_modules/instagram-filters/lib/index.js"(exports) {
    var __awaiter = exports && exports.__awaiter || function(thisArg, _arguments, P, generator) {
      return new (P || (P = Promise))(function(resolve, reject) {
        function fulfilled(value) {
          try {
            step(generator.next(value));
          } catch (e) {
            reject(e);
          }
        }
        function rejected(value) {
          try {
            step(generator["throw"](value));
          } catch (e) {
            reject(e);
          }
        }
        function step(result) {
          result.done ? resolve(result.value) : new P(function(resolve2) {
            resolve2(result.value);
          }).then(fulfilled, rejected);
        }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
      });
    };
    var __generator = exports && exports.__generator || function(thisArg, body) {
      var _ = { label: 0, sent: function() {
        if (t[0] & 1)
          throw t[1];
        return t[1];
      }, trys: [], ops: [] }, f, y, t, g;
      return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() {
        return this;
      }), g;
      function verb(n) {
        return function(v) {
          return step([n, v]);
        };
      }
      function step(op) {
        if (f)
          throw new TypeError("Generator is already executing.");
        while (_)
          try {
            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done)
              return t;
            if (y = 0, t)
              op = [op[0] & 2, t.value];
            switch (op[0]) {
              case 0:
              case 1:
                t = op;
                break;
              case 4:
                _.label++;
                return { value: op[1], done: false };
              case 5:
                _.label++;
                y = op[1];
                op = [0];
                continue;
              case 7:
                op = _.ops.pop();
                _.trys.pop();
                continue;
              default:
                if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) {
                  _ = 0;
                  continue;
                }
                if (op[0] === 3 && (!t || op[1] > t[0] && op[1] < t[3])) {
                  _.label = op[1];
                  break;
                }
                if (op[0] === 6 && _.label < t[1]) {
                  _.label = t[1];
                  t = op;
                  break;
                }
                if (t && _.label < t[2]) {
                  _.label = t[2];
                  _.ops.push(op);
                  break;
                }
                if (t[2])
                  _.ops.pop();
                _.trys.pop();
                continue;
            }
            op = body.call(thisArg, _);
          } catch (e) {
            op = [6, e];
            y = 0;
          } finally {
            f = t = 0;
          }
        if (op[0] & 5)
          throw op[1];
        return { value: op[0] ? op[1] : void 0, done: true };
      }
    };
    function __export(m) {
      for (var p in m)
        if (!exports.hasOwnProperty(p))
          exports[p] = m[p];
    }
    Object.defineProperty(exports, "__esModule", { value: true });
    var pipe_1 = require_pipe();
    var InstagramFiltersError_1 = require_InstagramFiltersError();
    function applyPresetOnCanvas(canvas) {
      var presets = [];
      for (var _i = 1; _i < arguments.length; _i++) {
        presets[_i - 1] = arguments[_i];
      }
      if (!canvas) {
        throw new InstagramFiltersError_1.InstagramFiltersError("canvas argument must be defined");
      }
      if (!presets || !presets.length) {
        throw new InstagramFiltersError_1.InstagramFiltersError("At least one preset must be passed");
      }
      var firstPreset = presets[0], nextPresets = presets.slice(1);
      var context = canvas.getContext("2d");
      if (!context) {
        throw new InstagramFiltersError_1.InstagramFiltersError("Unable to retrieve context from the canvas");
      }
      var pixels = context.getImageData(0, 0, canvas.width, canvas.height);
      var filteredPixels = pipe_1.pipe.apply(void 0, [firstPreset].concat(nextPresets))(pixels);
      context.putImageData(filteredPixels, 0, 0);
    }
    exports.applyPresetOnCanvas = applyPresetOnCanvas;
    function applyPresetOnImage(image) {
      var presets = [];
      for (var _i = 1; _i < arguments.length; _i++) {
        presets[_i - 1] = arguments[_i];
      }
      return __awaiter(this, void 0, void 0, function() {
        var canvas, context, blob;
        return __generator(this, function(_a) {
          switch (_a.label) {
            case 0:
              if (!image) {
                throw new InstagramFiltersError_1.InstagramFiltersError("image argument must be defined");
              }
              canvas = document.createElement("canvas");
              canvas.width = image.naturalWidth;
              canvas.height = image.naturalHeight;
              context = canvas.getContext("2d");
              if (!context) {
                throw new InstagramFiltersError_1.InstagramFiltersError("Unable to retrieve context from the canvas");
              }
              context.drawImage(image, 0, 0, canvas.width, canvas.height);
              applyPresetOnCanvas.apply(void 0, [canvas].concat(presets));
              return [4, new Promise(function(resolve) {
                return canvas.toBlob(resolve);
              })];
            case 1:
              blob = _a.sent();
              canvas.remove();
              return [2, blob];
          }
        });
      });
    }
    exports.applyPresetOnImage = applyPresetOnImage;
    function applyPresetOnImageURL(url) {
      var presets = [];
      for (var _i = 1; _i < arguments.length; _i++) {
        presets[_i - 1] = arguments[_i];
      }
      return __awaiter(this, void 0, void 0, function() {
        var image;
        return __generator(this, function(_a) {
          switch (_a.label) {
            case 0:
              return [4, new Promise(function(resolve, reject) {
                var imageElement = new Image();
                imageElement.addEventListener("load", function() {
                  return resolve(imageElement);
                });
                imageElement.addEventListener("error", reject);
                imageElement.src = url;
              })];
            case 1:
              image = _a.sent();
              return [2, applyPresetOnImage.apply(void 0, [image].concat(presets))];
          }
        });
      });
    }
    exports.applyPresetOnImageURL = applyPresetOnImageURL;
    __export(require_presets());
  }
});
export default require_lib();
//# sourceMappingURL=instagram-filters.js.map
